<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fuzzware-Using Precise MMIO Modeling for effective FirmWare Fuzzing</title>
    <link href="/2022/03/02/paperReading/"/>
    <url>/2022/03/02/paperReading/</url>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>​    随着嵌入式设备在我们的日常生活中变得越来越普遍，它们成为了对手的一个有吸引力的攻击目标。尽管它们的价值很高，攻击面也很大，但对于此类设备来说，应用模糊测试等自动化测试技术并不简单。由于在受限制的嵌入式设备上对固件进行模糊测试效率低下，最先进的方法反而选择在模拟器中运行固件（通过一个称为重新托管的过程）。然而，现有的方法要么使用硬件行为的粗粒度静态模型，要么需要手动重新托管固件。 </p><p>​    我们提出了一种轻量级程序分析、重新托管和模糊测试的新组合(Fuzzware)来应对这些挑战。我们介绍了FUZZWARE的设计和实现，FUZZWARE是一个纯软件系统，用于以可扩展的方式对未修改的单片固件进行模糊测试。通过确定固件逻辑实际使用硬件生成值的方式，FUZZWARE可以自动生成模型，帮助将模糊化过程集中在重要输入的变异上，从而显著提高效率。 </p><p>​    我们在合成目标和真实目标上分别评估了我们的方法，这些目标包括总共19个硬件平台和77个固件映像。与最先进的工作相比，FUZZWARE实现了高达3.25倍的代码覆盖率，我们的建模方法将输入空间的大小减少了95.5%。合成样本包含66个针对各种硬件交互的单元测试，我们发现我们的方法是第一个自动通过所有测试的通用重新托管解决方案。FUZZWARE发现了15个全新的bug，包括之前由其他工作分析的目标中的bug,获得了12项CVE。 </p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>​    嵌入式系统已经渗透到我们的日常生活中，推动我们的社会向一个互联的“智能”世界过渡。安全性起着支持作用，安全连接设备的第一步是以高效且可扩展的方式主动识别其安全漏洞。 实现这一目标的一种方法是自动模糊测试(fuzzing)。不幸的是，嵌入式设备的模糊测试具有挑战性[39]。由于硬件资源有限导致模糊化速度较低，因此设备上的模糊化对于固件来说是不切实际的[21]。以完全黑盒的方式模糊设备[9]会导致缺少反馈和有限的碰撞检测，这极大地限制了模糊器的有效性[21,25,42]。同样，由于需要同步硬件和仿真环境，设备“在回路中”的模糊化[38,39]也会导致资源限制。 </p><p>​    解决上述固有问题的一种方法是重新托管(re-hosting)，其中固件在模拟环境中执行[17,51]。有多种方法可以通过重新托管(re-hosting)来动态分析基于Unix的固件[8,46,56]，但这些方法不适用于单片固件，单片固件由一个不透明的二进制blob组成。现代仿真环境[5,50]通过精确模拟有限的一组硬件，甚至可以重新托管(re-hosting)单片固件。然而，这类工具需要分析员找到或手动创建所有硬件外围设备的软件等价物（型号），以便固件运行，这是一项复杂而耗时的任务。 </p><p>​    因此，最近的工作转向了自动化的无硬件re-hosting，并且出现了处理硬件外围设备的不同策略。高级仿真方法试图通过重新实现和连接到已知库来解决缺少外围模型的问题，从而完全避免硬件访问[11,33,35]。相比之下，基于模式的建模方法通过将访问模式与常见的静态硬件寄存器类型匹配来对硬件外围设备的寄存器进行建模[18,22,23]。第三个方向是部署引导符号执行(symbolic execution)的工具，它将硬件寄存器视为符号输入的源。然后，将得到的符号值求解为保证固件运行的最有希望的路径[7,57]。所有这些策略都允许固件的重新宿主，然而，我们发现，当通过模糊测试重新宿主的固件时，它们遇到了一些限制。 </p><p>​    为了填补这一空白，我们提出了一种细粒度的自动建模方法，该方法针对覆盖率引导的(coverage-guided) fuzzer进行了优化。我们的方法是基于这样一种认识，即对硬件外围设备的许多访问都是短暂的，并且发生的原因与固件的整体行为无关，例如检查外围设备的状态或设置其配置。对于确实会影响固件行为的访问，固件通常会保留大部分未使用的输入，例如，直接从32位值中提取几位，或间接区分少数状态值。通过定期查询超过使用量的数据，固件在访问硬件时会产生大量的输入开销。 </p><p>​    为了消除这种开销，我们利用局部范围的动态符号执行(symbolic execution)（DSE），并分析硬件生成值的哪些部分对固件逻辑实际有意义。然而，与之前的方法不同，我们不使用DSE引擎来求解特定值，以探索固件功能的特定部分。相反，我们使用生成的约束来推断面向输入开销消除的通用访问模型。然后，这些访问模型被用于配置模拟器，它们的具体值随后由fuzzer提供。这种建模方法的一个重要方面是，在仿真过程中，我们的模型在任何时候都不会做出实际的决策，或者将一个决策置于另一个决策之上。这种建模的单一目标是以尽可能少的开销向fuzzer呈现原始的选择集。因此，fuzzer仍然可以根据硬件生成的值探索固件可能采用的所有路径。 </p><p>  我们在一个名为FUZZWARE的工具中实现了我们的方法，并根据总共19个硬件平台上的77个固件映像对其进行了评估。我们的评估显示，虽然消耗了总实验计算时间的0.5%-2%，但我们的访问模型消除了高达95.5%的输入作为输入开销，使模糊器只关注于改变硬件生成值的相关4.5%。与最先进的工具[18,57]相比，FUZZWARE实现了高达3.25倍的覆盖率（在24小时内），发现了这些工具已经分析过的样本中的其他缺陷，是第一种在P2IM引入的重新定位单元测试基准上获得完美通过分数的方法[18]。最后，我们将展示如何使用FUZZWARE来识别复杂现实目标中的漏洞。为此，我们分析了两种广泛使用的嵌入式固件框架ZEPHYR[55]和CONTIKI-NG[12]的网络堆栈。我们发现了15个以前未知的漏洞，获得了12项CVE。 </p><p>​    总之，我们做出了以下贡献：</p><ul><li><p>我们提出了一种新的细粒度访问建模方法，该方法保留了通过固件逻辑的所有路径，并允许模糊器仅有效地变异有意义的硬件生成值。</p></li><li><p>我们描述并实现FUZZWARE，这是一个高效、自适应的模糊系统，能够以操作系统不可知的方式测试单片固件映像。</p></li><li><p>在几个实验中，我们发现FUZZWARE在测试嵌入式固件方面的表现优于之前的工作。我们的原型在核心嵌入式网络堆栈中发现了12个以前未知的漏洞，我们负责地向受影响的供应商披露了这些漏洞。</p></li></ul><p>​    为了促进这方面的研究，我们将在 github网站: <a href="https://github.com/fuzzware-fuzzer/fuzzware">https://github.com/fuzzware-fuzzer/fuzzware</a>. 上开源代码，详细的实验数据集和bug信息.</p><h2 id="2-技术背景"><a href="#2-技术背景" class="headerlink" title="2 技术背景"></a>2 技术背景</h2><p>​    在解释我们方法的技术细节之前，我们首先讨论嵌入式系统和固件的不同方面，这些方面使它们有趣且难以分析。 </p><h3 id="单片嵌入式系统"><a href="#单片嵌入式系统" class="headerlink" title="单片嵌入式系统"></a>单片嵌入式系统</h3><p>​    嵌入式系统通常是专门构建的、资源有限的设备。这些系统运行的代码称为固件。嵌入式系统的固件负责设备的所有功能，可能包含也可能不包含传统操作系统。单片固件映像是这项工作的重点，它不包含二进制可执行文件中的传统元数据。这使得它们很难用传统方法进行分析。 </p><h3 id="内存映射IO"><a href="#内存映射IO" class="headerlink" title="内存映射IO"></a>内存映射IO</h3><p>​    现代CPU体系结构允许通过内存映射I&#x2F;O（MMIO）访问其外围设备。这些外围设备被分配了设备物理内存空间的一个区域。每个区域的内存位置，在芯片文档中称为MMIO寄存器，通过常规加载\存储指令访问。这些指令不会像普通内存那样运行，而是会触发受影响外围设备中的硬件行为。例如，考虑连接到嵌入式微控制器（MCU）的GPIO引脚的按钮。MCU可以通过读取代表其GPIO引脚的MMIO寄存器来检查按钮是否按下。不同类型的MMIO寄存器执行某些角色，例如标识、状态（例如，是否按下按钮）、配置和数据传输。因此，MMIO寄存器可以随时快速更改值。寄存器的大小（位宽度）以及允许读取和&#x2F;或写入操作各不相同。 </p><p>​    考虑使用串行端口在MCU上运行的固件代码。图1显示了这种MCU的I&#x2F;O是如何组织的。配置串行波特率后，固件等待命令启动数据传输。用户通过自己的计算机连接到MCU中的串行通信端口。固件通过检查串行外围设备的状态寄存器来通知输入数据，并通过外围设备的数据寄存器读取串行数据。请注意，没有标准化的输入源，例如标准输入。送往嵌入式系统的输入可能来自多个硬件外围设备，甚至可能来自同一设备中的多个源。</p><h3 id="中断和直接存储器读取"><a href="#中断和直接存储器读取" class="headerlink" title="中断和直接存储器读取"></a>中断和直接存储器读取</h3><p>​    除了软件启动的通信通道之外，硬件还有两种额外的方式与它的固件通信:第一种，硬件使用中断通知软件异步事件[32]。例如，可以将串行端口配置为在数据到达时触发中断，从而允许数据立即被处理。CPU根据中断数跟踪这些中断，并维护一个固件函数表，即所谓的中断服务例程(isr)，用来处理新事件。根据CPU模型的不同，还可以有选择地禁用中断，或者给定一个优先级级别，允许某些中断具有优先级。外围设备与其中断数的关联取决于所使用的特定CPU模型，并且可能差别很大，甚至在同一供应商的产品中也是如此。第二个异步通信通道称为直接内存访问(DMA)，它是通过MMIO配置的。使用DMA，外设能够通过直接与内存控制器对话而不涉及CPU来更新可访问固件的常规内存。虽然中断被普遍用作固件的输入源，DMA主要用于高吞吐量场景，如USB。</p><h3 id="嵌入式系统的托管-re-hosting"><a href="#嵌入式系统的托管-re-hosting" class="headerlink" title="嵌入式系统的托管(re-hosting)"></a>嵌入式系统的托管(re-hosting)</h3><p>​    固件重新托管是在不依赖实际硬件的情况下运行固件二进制映像的一种方法。在一个完全虚拟化的环境中仿真固件允许多个仿真器实例并行运行，从而支持有效的动态分析技术，如fuzzing。一般来说，要重新托管固件，需要模拟固件和硬件之间的三种主要交互:中断、DMA和MMIO。从这三个方面来看，我们在本工作中关注的MMIO代表了一个重要的份额，并被普遍使用。我们需要正确地处理MMIO访问，甚至到达执行DMA的固件部分。为了在固件中处理MMIO行为，各种方法有不同的方向。例如，QEMU完全重新实现每个MMIO寄存器的行为。虽然这种方法可以精确地模拟MMIO，但它需要为每个模拟外设进行大量的工程工作，并访问完整的硬件文档。另一种建模MMIO外围设备行为的方法是近似。其基本思想是使用一个模糊器来处理MMIO访问，就像它们在实践中会发生一样。在大多数的naïve形式中，当固件代码访问MMIO寄存器时，fuzzer提供的值可以直接作为硬件生成的值。这种通用的方法很有吸引力，因为它允许在没有MMIO使用和处理MMIO访问的先验知识的情况下运行固件，即使没有一个外围设备的精确实现可用。然而，正如我们接下来将要讨论的，这是非常具有挑战性的:一个fuzzer必须为大量的MMIO访问提供输入，其中许多与固件行为无关，因此这种方法不能扩展到现实世界的系统。</p><h2 id="3-MMIO访问处理"><a href="#3-MMIO访问处理" class="headerlink" title="3 MMIO访问处理"></a>3 MMIO访问处理</h2><p>​    如前一节所讨论的，固件普遍依赖于MMIO访问。因此，在仿真过程中处理MMIO访问对于启用有效的固件fuing是至关重要的。在下面，我们将研究为什么基于naïve模糊的MMIO访问处理方法将模糊器暴露在大量的输入开销中。接下来，我们将讨论之前通过MMIO建模来消除这种开销的方法，以及它们在实现有效的、可扩展的模糊处理方面的缺点。</p><h3 id="输入开销-Input-Overhead"><a href="#输入开销-Input-Overhead" class="headerlink" title="输入开销(Input Overhead)"></a>输入开销(Input Overhead)</h3><p>​    假设采用naïve方法，其中由fuzzer生成的随机字节流中的位被用作硬件生成的值(即，从固件的角度来看，由硬件MMIO寄存器提供的值)。我们将这些位称为模糊突变的输入空间，然后由固件逻辑处理。这个输入空间包含相关的位，例如，影响固件逻辑的位，和输入开销。对于每个MMIO访问，我们区分两种类型的输入开销:</p><ul><li>全输入开销:由模糊器提供的位是无关的。换句话说，模拟器可以静态地处理MMIO访问，例如，通过提供任意值。</li><li>部分输入开销:一个或多个比特是相关的，即，它们影响固件逻辑(例如，通过影响控制流决策)，而其他比特则不会。例如，考虑固件代码访问32位宽的MMIO寄存器，但实际上只使用了8位产生的硬件值。如果整个32位的模糊输入被用于服务访问，则引入了24位的部分输入开销。</li></ul><p>​    虽然从根本上来说很简单，但是这些开销类型控制着模糊器的效率:将模糊器暴露给输入开销会导致模糊器改变不影响固件逻辑的位，从而浪费资源。为了在实践中更好地理解这一点，我们探索了两个代码示例，它们受到现实世界固件的启发，代表了典型的固件操作。</p><h3 id="先前的MMIO建模方法"><a href="#先前的MMIO建模方法" class="headerlink" title="先前的MMIO建模方法"></a>先前的MMIO建模方法</h3><p>​    从本质上说，最近提出的无硬件重新托管方法部署了以下策略之一来处理未知的外设:</p><ul><li><p>通过完全避免MMIO访问，高级仿真克服了建模特定硬件外设的需要。以前的工作抽象了一些固件代码，这些代码通过hook和手工处理高级库函数来执行低级的MMIO访问。</p></li><li><p>基于模式的MMIO建模可以直接处理MMIO访问。它们允许模拟固件执行MMIO访问，并试图通过使用基于访问模式的启发式来减少输入空间[18,22,23]。这意味着观察访问MMIO寄存器，将这些观察与常见的预定义模式相匹配，并将模型分配给特定的MMIO寄存器。然后，这个模型决定如何为将来对这个寄存器的访问服务。</p></li><li><p>基于引导符号执行的建模方法[7,57]改进了基于模式的MMIO建模。与基于启发式分配静态模式不同，对硬件的访问被视为符号值。每当需要一个MMIO访问的具体值时，底层的符号变量将被求解到最有希望的路径上，也就是说，固件逻辑的更多覆盖范围。</p></li></ul><p>我们发现了当前MMIO建模方法的三个问题:(1)每个固件的手工工作，(2)不完整的开销消除，(3)路径消除。</p><p><strong>Per-firmware手工工作</strong>。所有之前的解决方案都需要手工工作，当准备特定的固件，以fuzzing活动。例如，这包括创建HAL抽象，纠正错误分类的MMIO寄存器，或识别活点和杀死点来控制符号执行引擎。尽管最近的方法[7,57]部署了启发式方法来减少人工的参与，但我们注意到在实际使用中，仍然需要特定于固件的知识，这限制了模糊测试的灵活性。</p><p><strong>开销消除不完整</strong>。虽然有效地消除了全部的输入开销，但基于模式的方法通常根据固件“典型”实现方式的约定对硬件行为进行假设，而不是考虑实际的固件逻辑。然而，它们不能识别输入的哪些部分实际上被固件使用，也就是说，它们不能消除部分输入开销。</p><p><strong>路径消除</strong>。虽然基于引导符号执行的方法减少了大量的输入开销，但它们愿意在模糊测试期间保留固件的特定部分，即消除固件的可用执行路径。高级模拟用抽象替换固件的全部部分，并且基于模式的MMIO可能会错误地对某些寄存器进行分类，或者错误地认为对于给定的MMIO访问不存在相关的选项。基于符号执行的引导方法使用启发式和人类洞察力来决定哪些路径值得探索。</p><p>​    虽然路径消除允许重新托管固件，但它对模糊测试有严重的后果。首先，消除特定路径可能会导致固件功能的大部分不可访问，进而无法分析。即使假设建模正确，路径消除也会影响错误处理和恢复功能，这些功能可能包含错误，不应该被排除。此外，我们认为，在一般情况下，区分常规固件行为和错误处理功能是一个无法确定的问题:在固件逻辑中，通过复杂的诊断和恢复尝试，可能会满足错误条件。与此同时，常规的固件行为，不明显地等待异步事件，可能会出现无限循环，不执行任何有意义的操作。这直接反映了最先进的解决方案，这些方案在没有人力协助的情况下陷入执行停滞[18,57]。</p><p>​    根据这些见解，我们得出结论，用于模糊测试的有效的重新托管解决方案必须避免路径消除，同时减少每个固件的手工工作，并尽可能地消除输入开销，这直接反映在我们的设计中。</p><h2 id="4-设计"><a href="#4-设计" class="headerlink" title="4 设计"></a>4 设计</h2><p>​    在下文中，我们将介绍FUZZWARE的设计，这是一种通用的固件模糊方法，允许模糊器通过精确地消除部分和全部输入开销来有效地探索固件行为。为此，我们将我们的建模建立在轻量级程序分析技术的基础上，这种技术允许我们发现硬件生成值的部分使用。为了分析固件代码的行为，我们采用了动态符号执行(DSE)[43]。DSE允许我们生成一组约束，表示硬件生成值的所有可能用途。评估这些约束可以让我们缩小模糊器要探索的值集。通常，由于状态爆炸问题，使用符号执行建模会引入很高的计算成本。我们通过使用本地DSE来避免这个缺点，其中DSE仅用于在特定MMIO访问的上下文中执行代码。我们将在4.3节详细描述限制DSE的范围。</p><h3 id="前提条件和威胁模型"><a href="#前提条件和威胁模型" class="headerlink" title="前提条件和威胁模型"></a>前提条件和威胁模型</h3><p>FUZZWARE有以下先决条件和威胁模型:</p><p><strong>先决条件</strong>:FUZZWARE与所有其他重新托管系统共享两个基本先决条件:首先，我们假设我们能够获得目标设备的二进制固件镜像。其次，就像其他重新托管系统一样，我们假设提供基本的内存映射，如RAM范围和广泛的MMIO空间。根据目标CPU体系结构的不同，这些通用范围可以被标准化为[1]。</p><p><strong>威胁模型</strong>:在不了解给定二进制固件映像的特定硬件环境的情况下，我们假设攻击者能够控制提供给固件的输入。通常，这些输入可能对应于通过MMIO读取的传入网络包的内容，通过串行接口接收的数据，或温度测量等感觉数据。在第6.4节中，我们分析了攻击者对硬件生成值的控制较少的情况</p><p>下图:FUZZWARE的MMIO访问处理设计。fuzzing引擎生成一个原始输入文件。在MMIO访问时，输入文件的块被MMIO访问模型使用，并转换为(可能更大的)硬件生成的值，然后提供给模拟固件。一旦原始输入耗尽，覆盖反馈被提供给fuzzing引擎以指导fuzzing过程。</p><p><img src="https://s2.loli.net/2022/03/03/iLHIJmpdCMaT5gh.png" alt="1.png"></p><h3 id="FUZZWARE的模拟器"><a href="#FUZZWARE的模拟器" class="headerlink" title="FUZZWARE的模拟器"></a>FUZZWARE的模拟器</h3><p>​    我们现在描述FUZZWARE仿真组件的设计。图4显示，从高层次的观点来看，FUZZWARE使用了ISA仿真器和覆盖引导的模糊引擎(fuzzer)。由于FUZZWARE的目标是消除部分输入开销，我们引入了访问模型，这是一种机制，可以将少量的模糊输入位转换为对固件逻辑有意义的值，同时消除过程中的输入开销。</p><p>​    我们首先将给定的单片固件映像加载到ISA模拟器中。我们设置了一个工具来动态拦截所有的MMIO访问，也就是说，模拟固件代码在MMIO区域内的所有地址上执行的内存操作。该工具提供了一个原始输入(即，一个普通的二进制文件)，由覆盖率引导的模糊器生成;然后，它开始固件代码模拟。原始输入被分成块来服务于MMIO访问。当固件代码执行一个MMIO访问时，这个工具会检查我们是否已经为这个特定的访问分配了一个MMIO访问模型。如果有一个可用的模型，并且取决于输入开销的类型，那么这个设备可以在不消耗任何原始输入的情况下处理访问(在完全输入开销的情况下)。否则，该工具将消耗大量的原始输入，并通过模型将其转换为硬件生成的值(部分输入开销)。然后使用硬件生成的值为MMIO访问提供服务。模拟器运行固件代码，直到模糊器的原始输入耗尽，它不能再服务于MMIO访问。我们将此模拟循环称为模拟运行。当模拟运行结束时，该装置将固件恢复到干净状态，并向模糊器报告前一次模拟运行的覆盖反馈。基于此反馈，模糊器生成另一个原始输入，并将其提供给下一次模拟运行的装置。</p><p>​    但是，如果在模拟过程中，一个特定的MMIO访问还没有分配模型，原始输入块被用作硬件生成的值而不需要转换。在进行模糊处理的同时，FUZZWARE开始对每个新看到的MMIO访问上下文(当前程序计数器和MMIO地址对)进行建模。在一个单独的模拟器实例中，我们在MMIO访问之前创建一个固件状态的快照(即寄存器和内存)。我们从这个快照中使用符号执行来获得一个匹配的模型(在4.3节中详细描述)。然后我们用新的模型重新配置模拟器，允许模糊器以更少的输入开销更有效地发现进一步的固件逻辑。</p><p>​    我们通过不提供初始的MMIO访问模型来引导这个模糊循环。当模糊器激活时，模型不断生成并添加到仿真器配置中。本设计提供了一个通用的、自适应的固件仿真环境，允许模糊引擎以最小的输入开销来探索未知的固件。</p><h3 id="建模方法"><a href="#建模方法" class="headerlink" title="建模方法"></a>建模方法</h3><p>​    如前所述，对于每个MMIO访问上下文(即程序计数器和访问的MMIO地址)，我们构建一个访问模型。为了做到这一点，我们重放执行新的MMIO访问的输入，并在固件执行MMIO访问之前快照模拟器的寄存器和内存状态。我们将该快照传递给DSE引擎进行建模，并从快照开始象征性地执行代码。在符号执行期间观察到的每个MMIO访问都被视为一个单独的符号变量。</p><p>​    <strong>建模分析范围</strong>:我们跟踪第一次MMIO访问(以及来自相同访问上下文的任何其他访问)，以跟踪结果的符号变量是否仍然存在，也就是说，内存或寄存器中至少有一个符号表达式仍然依赖于它。符号执行继续进行，直到发生以下事件之一:</p><ol><li>所有被跟踪的符号变量都是死的(即，不是活的)</li><li>当前函数返回</li><li>一个被跟踪的符号变量正在离开分析的范围(例如，它被写入全局内存或调用栈中更高的函数的堆栈帧)</li><li>预定义的计算资源限制耗尽(超时、符号状态数或达到DSE步骤数)</li></ol><p>​    使用这些退出条件，我们将DSE缩小到一个小的、可管理的范围，在这个范围内，我们能够观察基于MMIO访问的固件所采取的所有动作。与此同时，我们不会对超出此范围的硬件生成值的使用进行建模。这个决定作用域的基本原理在于MMIO寄存器状态的短暂性(见第2.2节)，这迫使固件频繁地访问并快速丢弃硬件生成的值。正如我们将在第6.1节中所展示的，我们的评估支持这个概念。</p><p>​    一旦达到某个退出条件，建模逻辑就会分析产生的符号状态。每个符号状态对应于固件代码可能采取的路径，这取决于硬件生成的值。符号状态有一组不同的路径约束，需要遵循硬件生成的值，以及可能包含活的跟踪变量的符号表达式。然后将这些符号状态用作输入，为所分析的MMIO访问分配和配置模型。</p><p>​    <strong>模型设计的考虑</strong>:根据前面的讨论，有两个方面是我们模型设计的核心:首先，模型提供可重复的翻译。对给定的原始输入执行多次模拟运行必须导致相同的固件执行。当我们生成MMIO访问快照用于在独立的仿真器实例中建模时，我们需要相同的行为，与正在进行的fuzzing并行。为了保持翻译的可重现性，我们专门从模糊输入的块中获得硬件生成的值。其次，我们设计模型来保存固件代码路径。虽然我们的目标是尽可能地消除输入开销，但我们保守地应用不会使固件代码路径在过程中不可用的模型。因此，我们只能基于我们可以完全观察到的变量使用对访问进行建模。如果一个活动变量离开了我们的分析范围，我们将基于固件逻辑已经放置在被建模变量上的约束进行建模</p><p>​    <strong>错误处理和执行停滞</strong>:当然，通过保留所有固件代码路径，我们也允许模糊器执行错误路径。这是有意为之的:与之前的建模方法相反，我们明确地不尝试对特定路径进行优先级排序，或者删除看起来无趣的整个路径(参见第3.2节)。相反，我们发现处理不规则情况的代码可能包含bug，并且应该同样地包含在分析中。这不可避免地导致输入，导致固件执行停滞。然而，我们注意到这些情况是由模糊器无缝地处理的:每当执行停顿时，模糊器将识别出缺失的代码覆盖。因此，相应的输入将被丢弃为无趣的，并且变异引擎将快速产生具有更大代码覆盖率的输入。我们想强调的是，这种探索错误处理的有意识的决定不仅允许发现可能被忽略的错误，而且还允许真正健壮的、自动化的固件模糊处理，因为识别有趣的路径既不需要人类分析师也不需要启发式。</p><h3 id="FUZZWARE模型定义"><a href="#FUZZWARE模型定义" class="headerlink" title="FUZZWARE模型定义"></a>FUZZWARE模型定义</h3><p>​    我们总共定义了5个通用的MMIO访问模型，这些模型可以从DSE产生的符号状态集中分配。这些模型提供了一个蓝图为如何处理一个特定的MMIO模拟器系统访问和删除输入开销,全部或部分,基于典型的控制流MMIO使用(即,采取不同的行动基于值)或基于数据的MMIO使用(即,读取数据和解散)的全部或部分。其中一些通用模型根据规范接受参数。我们使用符号状态首先分配一个通用模型，然后通过给定的MMIO访问参数实例化它。通用模型包含模拟器的规范，说明如何应用模型参数来确定硬件生成的值。对于处理全部输入开销的模型，模型参数本身就足以处理访问，而不消耗任何模糊输入。对于处理部分输入开销的模型，仿真器需要模糊输入来应用模型。在这些情况下，它使用模型的参数将模糊输入块转换成硬件生成的值。</p><p>​    现在我们详细介绍五个通用模型。对于每一个，表1显示了它处理的输入开销的类型(开销)，它使用的参数(参数)，访问消耗的原始fuzzing比特(# fuzzing比特)，以及模型如何使用参数将原始fuzzing输入转换为硬件生成的值(输出)。</p><p><img src="https://s2.loli.net/2022/03/03/pSmCKDbaTsV7f5g.png" alt="2.png"></p><ul><li><p><strong>常数模型</strong>:这个模型描述了MMIO访问，其中使用了一个特定的常量作为比较的一部分，必须满足这个比较才能继续执行(参见图2中的1)。</p></li><li><p><strong>透传模型</strong>:这个模型被分配给硬件生成值不影响固件状态的访问。我们将MMIO访问视为常规内存访问。例如，这些包括访问配置寄存器(参见图2中的2)。</p></li><li><p><strong>位提取模型</strong>:当固件只使用从MMIO读取的部分位时，使用位提取模型。例如，当从MMIO寄存器中读取四个字节时，使用位掩码只保留少数位，而其他位被丢弃(见图2中的3)。请注意，对于位移位、截断和等价的指令组合，也会出现类似的效果。</p><p>示例:使用模型计算的位掩码0x00ff0000执行一个4字节宽的MMIO访问。仿真器消耗一个字节的模糊输入，例如0x4e。模拟器将0x004e0000作为MMIO访问的硬件生成值。对于0xfff0000f的位掩码和已消耗的原始输入块0xabf8，模拟器服务于0xabf00008。</p></li><li><p><strong>设置模型</strong>:set模型处理的情况是，根据不同的值检查硬件生成的值(部分)，以确定控制流。该模型用于预先计算离散值列表的情况，这样每个值都恰好代表一个可能的控制流选项。一大块原始模糊输入被解释为模糊器从每个单独访问的不同选项中做出的选择。可能的实例包括状态和标识寄存器，其中固件根据硬件生成的值执行不同的操作(参见图3)。</p><p>例如:一个2字节宽的MMIO访问是对一个由四个预计算值[1,5,7,128]组成的模型计算列表执行的。仿真器消耗2比特的模糊输入，例如0x1。模拟器将0x0005作为硬件生成的值。</p></li><li><p><strong>身份模型</strong>:如果DSE确定一个硬件生成的值的所有位都是有意义的(即，被固件使用)，这个模型就被赋值。如果不受约束的符号变量转义了分析范围，或者DSE没有在其资源限制内完成，它也可以用作回退。在这些情况下，我们保守地假设硬件生成的每一个值都可能稍后被固件使用。因此，我们允许模糊器尝试所有的值，从而发现所有的固件路径。正如我们将在第6.1节中展示的那样，这种回退在实践中很少需要。</p></li><li><p><strong>模型计算实例</strong>:为了进一步说明，我们重新检查串行外设的忙碌状态，如图2中的1所示。在遍历循环时，符号执行到达比较，并将执行分为两个状态—一个退出循环，另一个进行额外的循环迭代。通过生成多个这样的状态并检查路径约束，我们可以表明对于退出循环的每个状态，硬件生成的值必须等于在最后一次访问期间has_data，而之前的访问必须不同于HAS_DATA。因此，如果硬件生成的值不等于HAS_DATA，固件就不会继续执行。我们可以使用这个信息来为常量模型赋值，用HAS_DATA的值进行参数化。类似地，对于2中的GPIO更新，DSE将显示查询的硬件生成的值只被写回一个MMIO地址，而不涉及对执行状态的约束。因此，我们分配透传模型。最后，对于3,DSE表明，虽然路径本身不存在约束，但该函数返回了硬件生成值的屏蔽部分。当DSE在函数边界上终止(以避免路径爆炸)时，我们分配一个位提取模型。</p></li></ul><p><img src="https://s2.loli.net/2022/03/03/Y5q29rngwPOiatM.png" alt="3.png"></p><p><img src="https://s2.loli.net/2022/03/03/IZJnSjPx3W6b2EX.png" alt="4.png"></p><h3 id="中断，定时器和DMA处理"><a href="#中断，定时器和DMA处理" class="headerlink" title="中断，定时器和DMA处理"></a>中断，定时器和DMA处理</h3><p>​    如2.1节所述，中断是固件逻辑的异步输入源。由于ISA仿真器不包含任何引发中断的外设概念，这种行为必须由FUZZWARE触发。在默认情况下，FUZZWARE会在执行一定数量的基本块后以滚动的方式引发当前启用的每个中断。通过在执行期间检查CPU的中断控制器的状态来跟踪启用的中断集。</p><p>​    在其他外围设备行为中，FUZZWARE以这种方式模拟了基于中断的定时器外围设备。为了提供更多的灵活性来探索固件逻辑如何对特定时间的事件做出反应，FUZZWARE允许精确控制何时和哪些中断应该被触发。类似于访问模型如何使用模糊输入来确定硬件生成的值，模糊输入可以用来确定下一个中断的时间，以及它的数量。这允许模糊器发现非常特定的中断时间对固件行为的影响。请注意，FUZZWARE可以通过将传输缓冲区定义为MMIO区域来支持某些形式的DMA。然而，FUZZWARE目前还没有以自动化的方式显式地对DMA建模，因为这超出了本工作的范围。</p><h2 id="5-实现"><a href="#5-实现" class="headerlink" title="5 实现"></a>5 实现</h2><p>​    我们实现了一个针对ARM Cortex-M标准的FUZZWARE原型。我们之所以选择这个平台，是因为它在实践中得到了广泛的应用，并且预计它在未来会很受欢迎。该实现的设计使得将来可能支持其他目标ISAs。</p><h3 id="FUZZWARE的模拟器-1"><a href="#FUZZWARE的模拟器-1" class="headerlink" title="FUZZWARE的模拟器"></a>FUZZWARE的模拟器</h3><p>​    我们的实现是<strong>基于Unicorn Engine[49]作为基础ISA模拟器</strong>，我们使用传统的<strong>AFL[54]作为fuzzing引擎</strong>，以便与其他建模方法进行公平的比较。我们还集成了<strong>AFL++</strong>[19]的扩展特性集和基线性能。我们通过在原生<strong>Unicorn API中为MMIO区域注册内存访问钩子来处理MMIO访问。</strong>在执行读操作之前，我们通过将所分配模型的输出(如4.3节所述)写入被访问的MMIO地址来处理钩子读访问。通过MMIO访问上下文，即程序计数器和MMIO地址对，将内存访问与相应的模型关联起来。如果不存在关联的模型，我们默认根据Identity model处理访问。我们使用三个通用文件作为初始fuzzing输入(每个大小为512字节):所有的0位、所有的1位和连接的32位值，每个值都有一个移位的1位。</p><p>​    根据经验，我们发现在位粒度级上使用未经修改的面向字节的模糊器提供的原始模糊输入与驱动模糊器输入变异过程的启发式冲突。因此，为了处理MMIO访问，我们在字节粒度级上消耗原始输入。例如，虽然每个访问包含4个元素的集合模型都需要至少两个比特的fuzzing输入，但在我们当前的实现中消耗了一个字节。</p><p>​    <strong>定时器和中断</strong>。定时器和中断是固件执行中不确定性的来源。正如在4.3节中讨论的，我们需要模拟运行是完全可重现的。为了精确地实现可重复的计时行为，我们通过模拟的基本块的数量来度量运行时间。<strong>我们还用中断控制器(NVIC)和系统定时器(SysTick)的实现扩展了Unicorn Engine，这些都在Cortex-M标准中定义</strong>。</p><h3 id="MMIO访问建模"><a href="#MMIO访问建模" class="headerlink" title="MMIO访问建模"></a>MMIO访问建模</h3><p>​    对于DSE，我们选择了angr[44,45]作为引擎，因为它——就像Unicorn engine一样——很容易支持广泛的isa，并适合包含更多的架构。</p><p>​    在将固件状态快照加载到angr中，并为硬件生成的值创建一个符号变量，表示跟踪的MMIO访问，我们通过引用计数来跟踪变量的活动。每当DSE将包含被跟踪变量的符号表达式写入寄存器或内存时，我们就增加引用计数，每当这样的表达式被覆盖时，我们就减少引用计数。为了跟踪从具体的恢复状态快照分配的寄存器值是否影响建模结果，我们在加载快照后污染寄存器。</p><p>​    在遇到4.3节中描述的退出条件时，我们检查结果状态上的活动符号表达式和约束，以遵循每个模型定义，如下所述:</p><ul><li>常数模型:所有被跟踪的变量不再被引用，而是约束结果状态。在所有结果状态之间存在一个用于最新跟踪变量的公共值v，其属性如下:对于任何previous-to-last变量，赋值v不满足状态约束。常数值v将模型参数化。</li><li>透传模型:所有跟踪的变量不再被引用，不约束任何结果状态。</li><li>位提取模型(Bitextract Model):在每个状态下，对每个被跟踪的符号变量应用一个位掩码后，所有的状态约束和符号表达式保持不变。具有最低汉明权值的位掩码参数化模型。</li><li>集合模型:所有的变量不再被引用，而是约束结果状态。对于每个状态和引用计数的变量，都可以找到一个不满足任何其他状态的路径约束的值。换句话说，每个路径上的约束集形成了状态之间的输入空间分区。每个分区的最小代表被选择为配置集中的一个值，该值将模型参数化。</li><li>身份模型:以上模型均不适用，或在DSE范围内没有发现模型。</li></ul><p>​    如果应用多个模型，则选择减少输入开销最大的模型。作为DSE计算的限制，我们将每个模型的默认运行时间设置为5分钟，并且最多设置1000个符号执行的基本块，我们发现这在实践中工作得很好。</p><h2 id="6-评估"><a href="#6-评估" class="headerlink" title="6 评估"></a>6 评估</h2><p>我们通过考虑以下研究问题来评估FUZZWARE:</p><p><strong>RQ 1</strong> 实现的基于符号执行的建模的时间复杂度?</p><p><strong>RQ 2</strong> 由于其保守的范围，FUZZWARE错过了多少优化的建模机会?</p><p><strong>RQ 3</strong> FUZZWARE的MMIO访问模型是否适用于各种固件和硬件平台?</p><p><strong>RQ 4</strong> 与以前的方法相比，FUZZWARE在单片固件中表现如何?</p><p><strong>RQ 5</strong> FUZZWARE可以用来发现真实世界固件中以前未知的bug吗?</p><h2 id="7-讨论"><a href="#7-讨论" class="headerlink" title="7 讨论"></a>7 讨论</h2><p>​    在本节中，我们将进一步讨论我们的设计决策，FUZZWARE在原型实现之外的适用性，以及未来可能的研究方向。</p><p>​    <strong>直接存储器存取(DMA)</strong>:正如第4.5节所讨论的，虽然FUZZWARE允许通过额外的配置来处理DMA，但自动建模DMA并不是这项工作的重点。然而,我们看到一个中央贡献的工作向自动化DMA处理:DMA-handling固件代码往往是更复杂的代码的一部分(在那里,在实践中,重MMIO使用是不可避免的),实现较高的基线代码覆盖(就像我们展示与FUZZWARE节6)甚至是一个先决条件触发任何使用DMA。DICE[37]的作者，在最近描述一种通用的DMA处理方法时，遇到了这个问题:他们的评估显示，以前的固件fuing系统无法达到超过三分之一(36%)的DMA逻辑，这可能是由于缺少固件代码覆盖。</p><p>​    <strong>在FUZZWARE之外使用访问模型</strong>:FUZZWARE的MMIO访问模型在模糊过程中的紧密集成提出了这些模型能否独立使用的问题。幸运的是，一旦生成了这些模型，服务于请求所需的唯一信息就是访问大小、位置和程序计数器值——这些信息在其他分析框架中很容易获得。为了证明这允许互操作性，我们将FUZZWARE生成的模型集成到avatar2[38]中，作为所谓的外设。这支持模糊之外的动态分析功能，例如使用PANDA框架[16]进行污染分析。</p><p>​    <strong>路径消除的优点</strong>:以前的方法(例如，[7,18,57])消除了引导固件执行的代码路径。正如我们在第3.2节中所描述的，通过删除错误处理或强制执行复杂的错误处理例程，消除路径承担了从分析中排除相关功能的风险。由于基于启发式的“正确”代码路径分类很容易出错，而错误的分类需要人工干预来纠正，因此我们的目标是通过避免此类分类尝试来实现完全自动化设置中的稳健性。为了促进自动化，FUZZWARE允许命中卡住的情况(例如命中紧密的无限错误循环)，并依赖于FUZZWARE引擎来避免它们基于超时和覆盖反馈。未来的工作可以在这种中间方法的基础上进行改进，方法是识别和消除可以在不减少可达固件逻辑数量的情况下安全删除的卡住的情况。</p><p>​    <strong>隐含的外围语义</strong>:在我们的评估过程中，我们发现固件对其周围硬件行为的隐式假设导致了一些崩溃的测试用例。潜在的概念可能会开启未来的研究:直观地说，我们假设固件代码的构建和操作方式暴露了它对周围硬件所做的隐含假设的信息。这可能包括假设的大小限制，以及假设某些事件发生的预期顺序。进一步的分析可以利用这类信息来推导出日益复杂的外围行为模型。</p>]]></content>
    
    
    <categories>
      
      <category>物联网安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于艺术家炭治郎</title>
    <link href="/2022/02/24/Introduction/"/>
    <url>/2022/02/24/Introduction/</url>
    
    <content type="html"><![CDATA[<h2 id="关于艺术家炭治郎"><a href="#关于艺术家炭治郎" class="headerlink" title="关于艺术家炭治郎"></a>关于艺术家炭治郎</h2><p>​        经典永流传，说到炭治郎，大家肯定第一时间想到的会是，鬼灭之刃里面背着弥豆子的炭治郎。emm,不完全是，我可不会水调歌头，头上也没疤。这里可以直译了hh，就是<strong>治 炭 郎</strong>。这源于我有一年暑假在家，做豆角蒸面的经历。大概故事就是在蒸面的时候，我在刷B站，看张大仙视频，以至于，忘记关火，导致一锅面直接糊掉。盖着锅盖所以，糊掉产生的烟，困在锅里，落到面上，属于是我在家里面做的最难吃的一顿饭了，味道堪比炭,所以就给自己起名<strong>炭治郎</strong>。</p><p>​        为什么叫艺术家炭治郎呢？这源于我多年timi的成果。关注的B站王者荣耀主播Lusir(粉丝喜欢给他起sir或者er结尾昵称)，有一把遇到一个昵称叫艺术家安琪拉的玩家，打完翻看她的主页发现3000场安琪拉，我感觉这个很好笑，就把<strong>艺术家</strong>和<strong>炭治郎</strong>连起来成了一个昵称。</p><h2 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h2><p>​    其实想搭博客很久了，只不过确实没学过前端，加上确实很懒。之前打算做一个go web的博客，开了个头，最后搁浅了。所以这回直接用现成的hexo框架，选了开发好的现成主题fluid,(还是傻瓜式适合我),买了tanzhilang.xyz域名。</p><p>​    至于用途，当然就是归档一些技术文章，还有平时无处安放的废话，看过的好剧分享，还有追的漂亮姐姐！！！</p><p>​    李惠利，赵金麦姐姐yyds！！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://s2.loli.net/2022/02/25/Nw8DjuHc2yKT7oi.jpg" alt="" style="zoom:80%;" /></div><div class="group-image-wrap"><img src="https://s2.loli.net/2022/02/25/xyopiSgq4GsRh7d.jpg"></div></div><div class="group-image-row"></div></div><p>​    唔，废话以后再讲，先碎觉！</p>]]></content>
    
    
    <categories>
      
      <category>自我介绍</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
